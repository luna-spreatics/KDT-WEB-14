/* noonnu */
@font-face {
  font-family: "HSSaemaul-Regular";
  src: url("https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2108@1.1/HSSaemaul-Regular.woff")
    format("woff");
  font-weight: normal;
  font-style: normal;
}

/* font */
.box {
  width: 200px;
  height: 200px;
  font-size: 16px;
  /* px, em, rem, % 등으로 지정
    - em: 상위 요소 크기의 ??배로 하겠다
    - rem: 문서의 최상의 요소, html 요소 크기의 몇 배로
  */
  font-weight: 700;
  line-height: 4; /* 요소의 글꼴 크기의 배수로 지정*/
  text-align: center;
}

.google {
  font-family: "Protest Guerrilla", sans-serif;
}

.noon {
  font-family: "HSSaemaul-Regular";
}

/* border */
button {
  border: 1px solid black;
  background-color: white;
  border-radius: 5px;
}

/* box-sizing */
.container {
  /* box2를 나란히 두기 위해 사용 */
  display: flex;
}

.box2 {
  width: 200px;
  height: 100px;
  padding: 20px;
  border: 1px solid black;
  background-color: lightblue;
}
.content-box {
  box-sizing: content-box;
}
.border-box {
  box-sizing: border-box;
}
/*
  장단점
  content-box
  장점 - 콘텐츠 유연성 : 지정된 크기에 따라 동적으로 조정되므로, 디자인의 유연성이 높다
      - 디자인 제어 : 패딩, 테두리를 분리하여 디자인 요소를 더 정교하게 제어 가능
  단점 - 레이아웃 복잡성 : 다 각각 계산해야 하므로 시간과 노력이 소요
      - 계산 오류 가능성

  border-box
  장점 - 예측가능성 : 총 너비와 높이가 예측하기 쉽다
      - 유지보수, 간편한 계산
  단점 - 내용 공간 감소 : 실제 콘텐츠 영역이 작아짐
 */

/* visibility */
.square {
  width: 100px;
  height: 100px;
  border: 1px solid;
  display: inline-block;
}

.d-none {
  display: none;
  background-color: red;
}

.invisible {
  visibility: visible;
  background-color: orangered;
}
.invisible:hover {
  /* 속성 안 남아서 hover 안 됨 */
  visibility: hidden;
}

.opacity-0 {
  opacity: 1;
  background-color: tomato;
}
.opacity-0:hover {
  /* 속성 남아서 hover 됨 */
  opacity: 0;
}

.scroll {
  overflow: scroll;
  overflow-y: auto;
}

.auto {
  overflow: auto;
}
